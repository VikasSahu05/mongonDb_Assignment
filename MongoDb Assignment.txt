>use mongo_practice
--------------------------------------------------------------------------------------------------------------------------------------------------
>db.createCollection("movies")
--------------------------------------------------------------------------------------------------------------------------------------------------
> db.movies.insert({"title":"Fight club","writer":"Chuck Palahniuk","year":1999,"actors":['Brad pitt','Edward Norton']})
--------------------------------------------------------------------------------------------------------------------------------------------------
> db.movies.insertMany([{"title":"The Hobbit :The Desolation of Smaug","writer":"J.R.R. Tolkein","year":2013,"franchise":"The Hobbit"},{"title":"The Hobbit : The Battle of the Five Armies","writer":"J.R.R. Tolkein","year":2012,"synopsis":"Bilbo and Company are forced to engage in a war against an array of combatantas and keep the Lonely Mountains from falling into the hands of a rising darkness"}])
--------------------------------------------------------------------------------------------------------------------------------------------------
> db.movies.findOne()
--------------------------------------------------------------------------------------------------------------------------------------------------
> db.movies.findOne()
{
        "_id" : ObjectId("62fe0a798f49f6e3506321cc"),
        "title" : "Pulp Fiction",
        "wirter" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}

--------------------------------------------------------------------------------------------------------------------------------------------------

> db.movies.find().pretty()
{
        "_id" : ObjectId("62fe0a798f49f6e3506321cc"),
        "title" : "Pulp Fiction",
        "wirter" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62fe0a798f49f6e3506321cd"),
        "title" : "Inglorius Basterds",
        "writer" : "Quesntin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad pitt",
                "Dian Kruger"
        ]
}
{
        "_id" : ObjectId("62fe0d8a8f49f6e3506321ce"),
        "title" : "Fight club",
        "writer" : "Chuck Palahniuk",
        "year" : 1999,
        "actors" : [
                "Brad pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62fe0def8f49f6e3506321cf"),
        "title" : "The Hobbit :An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62fe0fc98f49f6e3506321d0"),
        "title" : "The Hobbit :The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62fe0fc98f49f6e3506321d1"),
        "title" : "The Hobbit : The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatantas and keep the Lonely Mountains from falling into the hands of a rising darkness"
}

--------------------------------------------------------------------------------------------------------------------------------------------------
> db.movies.deleteMany({"title":"The Hobbit :An Unexpected Journey1"})
{ "acknowledged" : true, "deletedCount" : 1 }

--------------------------------------------------------------------------------------------------------------------------------------------------
> db.movies.find({year :{$in: [1999,2012]}}).pretty()
{
        "_id" : ObjectId("62fe0d8a8f49f6e3506321ce"),
        "title" : "Fight club",
        "writer" : "Chuck Palahniuk",
        "year" : 1999,
        "actors" : [
                "Brad pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62fe0def8f49f6e3506321cf"),
        "title" : "The Hobbit :An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62fe0fc98f49f6e3506321d1"),
        "title" : "The Hobbit : The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatantas and keep the Lonely Mountains from falling into the hands of a rising darkness"
}

----------------------------------------------------------------------------
## Query / Find Documents
----------------------------------------------------------------------------
1.1 get all documents

____________________________________________________
> db.movies.find().pretty()
{
        "_id" : ObjectId("62fe0a798f49f6e3506321cc"),
        "title" : "Pulp Fiction",
        "wirter" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62fe0a798f49f6e3506321cd"),
        "title" : "Inglorius Basterds",
        "writer" : "Quesntin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad pitt",
                "Dian Kruger"
        ]
}
{
        "_id" : ObjectId("62fe0d8a8f49f6e3506321ce"),
        "title" : "Fight club",
        "writer" : "Chuck Palahniuk",
        "year" : 1999,
        "actors" : [
                "Brad pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62fe0def8f49f6e3506321cf"),
        "title" : "The Hobbit :An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62fe0fc98f49f6e3506321d0"),
        "title" : "The Hobbit :The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62fe0fc98f49f6e3506321d1"),
        "title" : "The Hobbit : The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatantas and keep the Lonely Mountains from falling into the hands of a rising darkness"
}
____________________________________________________
1.2. get all documents with `writer` set to "Quentin Tarantino"
-------------------------------------------------------------------------------
> db.movies.find({"writer":"Quentin Tarantino"}).pretty()
{
        "_id" : ObjectId("62fe5dd88f49f6e3506321d3"),
        "title" : "The Hobbit :An Unexpected Journey1",
        "writer" : "Quentin Tarantino",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62fe5e178f49f6e3506321d4"),
        "title" : "Avatar",
        "writer" : "Quentin Tarantino",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
__________________________________________________________
1.3. get all documents where `actors` include "Brad Pitt"
---------------------------------------------------------------------------------------

> db.movies.find({"actors":"Brad pitt"}).pretty()
{
        "_id" : ObjectId("62fe0a798f49f6e3506321cd"),
        "title" : "Inglorius Basterds",
        "writer" : "Quesntin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad pitt",
                "Dian Kruger"
        ]
}
{
        "_id" : ObjectId("62fe0d8a8f49f6e3506321ce"),
        "title" : "Fight club",
        "writer" : "Chuck Palahniuk",
        "year" : 1999,
        "actors" : [
                "Brad pitt",
                "Edward Norton"
        ]
}
__________________________________________________________
1.4 get all documents with `franchise` set to "The Hobbit"
----------------------------------------------------------------------------------
> db.movies.find({"franchise":"The Hobbit"}).pretty()
{
        "_id" : ObjectId("62fe0def8f49f6e3506321cf"),
        "title" : "The Hobbit :An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62fe0fc98f49f6e3506321d0"),
        "title" : "The Hobbit :The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62fe5dd88f49f6e3506321d3"),
        "title" : "The Hobbit :An Unexpected Journey1",
        "writer" : "Quentin Tarantino",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62fe5e178f49f6e3506321d4"),
        "title" : "Avatar",
        "writer" : "Quentin Tarantino",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
---------------------------------------------------------------------------------------
1.5 get all movies released before the year 2000 or after 2010
-------------------------------------------------------------------------------------
> db.movies.find({$or:[{year:{$lt:1999}},{year:{$gt:2012}}]}).pretty()
{
        "_id" : ObjectId("62fe0a798f49f6e3506321cc"),
        "title" : "Pulp Fiction",
        "wirter" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62fe0fc98f49f6e3506321d0"),
        "title" : "The Hobbit :The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
__________________________________________________
## Update Documents
----------------------------------------------------------------
1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
----------------------------------------------------------------------------------
db.movies.update({title:"The Hobbit :An Unexpected Journey1"},{$set:{"synopsis":"A reluctant hobbit ,Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home -and the gold within it -from the dragon Smaug."}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

-----------

> db.movies.find({title:"The Hobbit :An Unexpected Journey1"})
{ "_id" : ObjectId("62fe5dd88f49f6e3506321d3"), "title" : "The Hobbit :An Unexpected Journey1", "writer" : "Quentin Tarantino", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit ,Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home -and the gold within it -from the dragon Smaug." }
>
_________
--------------------------------------------------------------------------------------
## Text Search
________________________________________________________________
1. find all movies that have a synopsis that contains the word "Bilbo"
--------------------------------------------------------------------------------------------
> db.movies.find({synopsis:{$regex:"Bilbo"}}).pretty()
{
        "_id" : ObjectId("62fe0fc98f49f6e3506321d1"),
        "title" : "The Hobbit : The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatantas and keep the Lonely Mountains from falling into the hands of a rising darkness"
}
{
        "_id" : ObjectId("62fe5dd88f49f6e3506321d3"),
        "title" : "The Hobbit :An Unexpected Journey1",
        "writer" : "Quentin Tarantino",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit ,Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home -and the gold within it -from the dragon Smaug."
}
_
----------------------------------------------------------------------------------------
2. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"_
_____________________________________________________
> db.movies.find({$or:[{synopsis:{$regex:"dwarves"}},{synopsis:{$regex:"hobbit"}}]})

{ "_id" : ObjectId("62fe5dd88f49f6e3506321d3"), "title" : "The Hobbit :An Unexpected Journey1", "writer" : "Quentin Tarantino", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit ,Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home -and the gold within it -from the dragon Smaug." }
_________________________________________________________________________
## Delete Documents
------------------------------------------------------------------------------------------------
1. delete the movie "Pee Wee Herman's Big Adventure"
_________________________________________________________________
------------------------------------------------------------------------------------------------
> db.movies.remove({title:"Pee Wee Herman's Big Adventure"})
WriteResult({ "nRemoved" : 1 })

_______________________________________________________________________
2. delete the movie "Avatar"
___________________________________________________________________________
> db.movies.remove({title:"Avatar"})
WriteResult({ "nRemoved" : 1 })

----------------------------------------------------------------------------------------------------------
## RELATIONSHIPS
----------------------------------------------------------------------------------------------------------
### Insert the following documents into a `users` collection
----------------------------------------------------------------------------------------------------------
> db.users.insertMany([{"username":"GoodGuyGreg","first_name":"Good Guy","last_name":"Greg"},{"username":"ScumbagSteve","full_name":[{"first":"Scumbag","last":"Steve"}]}])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("63025cefd1da0eaff6b49eb9"),
                ObjectId("63025cefd1da0eaff6b49eba")
        ]
}
> db.users.find().pretty()
{
        "_id" : ObjectId("63025cefd1da0eaff6b49eb9"),
        "username" : "GoodGuyGreg",
        "first_name" : "Good Guy",
        "last_name" : "Greg"
}
{
        "_id" : ObjectId("63025cefd1da0eaff6b49eba"),
        "username" : "ScumbagSteve",
        "full_name" : [
                {
                        "first" : "Scumbag",
                        "last" : "Steve"
                }
        ]
}

-------------------------------------------------------------------------------------------------------------------
### Insert the following documents into a `posts` collection
-------------------------------------------------------------------------------------------------------------------
> db.createCollection("posts")
{ "ok" : 1 }
> db.posts.insertMany([{"username":"GoodGuyGreg","title":"Passes out at party","body":"Wakes up early and cleans house"},{"username":"GoodGuyGreg","title":"Steals your identity","body":"Raises your credit score"}])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("63025f5dd1da0eaff6b49ebd"),
                ObjectId("63025f5dd1da0eaff6b49ebe")
        ]
}
> db.posts.find().pretty()
{
        "_id" : ObjectId("63025f5dd1da0eaff6b49ebd"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at party",
        "body" : "Wakes up early and cleans house"
}
{
        "_id" : ObjectId("63025f5dd1da0eaff6b49ebe"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
_______________________________________________________________________
### Insert the following documents into a `comments` collection
-----------------------------------------------------------------------------------------------------------
> db.comments.insertMany([
... {
... username: "GoodGuyGreg",
... comment: "Hope you got a good deal!",
... post: ObjectId("5f44d3a148197d7749864def")
... },
... {
... username: "GoodGuyGreg",
... comment: "Don't violate the licensing agreement!",
... post: ObjectId("5f44d3a148197d7749864df0")
... },
... {
... username: "GoodGuyGreg",
... comment: "Don't violate the licensing agreement!",
... post: ObjectId("5f44d3a148197d7749864df1")
... },
... {
... username: "ScumbagSteve",
... comment: "It still isn't clean",
... post: ObjectId("5f44d3a148197d7749864dec")
... },
... {
... username: "ScumbagSteve",
... comment: "Denied your PR cause I found a hack",
... post: ObjectId("5f44d3a148197d7749864dee")
... }
... ]);
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("630272021fff23f31145282c"),
                ObjectId("630272021fff23f31145282d"),
                ObjectId("630272021fff23f31145282e"),
                ObjectId("630272021fff23f31145282f"),
                ObjectId("630272021fff23f311452830")
        ]
}

> db.comments.find().pretty()
{
        "_id" : ObjectId("630272021fff23f31145282c"),
        "username" : "GoodGuyGreg",
        "comment" : "Hope you got a good deal!",
        "post" : ObjectId("5f44d3a148197d7749864def")
}
{
        "_id" : ObjectId("630272021fff23f31145282d"),
        "username" : "GoodGuyGreg",
        "comment" : "Don't violate the licensing agreement!",
        "post" : ObjectId("5f44d3a148197d7749864df0")
}
{
        "_id" : ObjectId("630272021fff23f31145282e"),
        "username" : "GoodGuyGreg",
        "comment" : "Don't violate the licensing agreement!",
        "post" : ObjectId("5f44d3a148197d7749864df1")
}
{
        "_id" : ObjectId("630272021fff23f31145282f"),
        "username" : "ScumbagSteve",
        "comment" : "It still isn't clean",
        "post" : ObjectId("5f44d3a148197d7749864dec")
}
{
        "_id" : ObjectId("630272021fff23f311452830"),
        "username" : "ScumbagSteve",
        "comment" : "Denied your PR cause I found a hack",
        "post" : ObjectId("5f44d3a148197d7749864dee")
}
-----------------------------------------------------------------------------------------------------------
## Querying related collections
_______________________________________________________________________
1. find all users
--------------------
> db.users.find()
{ "_id" : ObjectId("63025cefd1da0eaff6b49eb9"), "username" : "GoodGuyGreg", "first_name" : "Good Guy", "last_name" : "Greg" }
{ "_id" : ObjectId("63025cefd1da0eaff6b49eba"), "username" : "ScumbagSteve", "full_name" : [ { "first" : "Scumbag", "last" : "Steve" } ] }
{ "_id" : ObjectId("63025e62d1da0eaff6b49ebb"), "username" : "GoodGuyGreg", "first_name" : "Good Guy", "last_name" : "Greg" }
{ "_id" : ObjectId("63025e62d1da0eaff6b49ebc"), "username" : "ScumbagSteve", "full_name" : [ { "first" : "Scumbag", "last" : "Steve" } ] }
>
------------------------------------------------------------------------------------------------------------------------------
2.find all posts
--------------------
> db.users.find()
{ "_id" : ObjectId("63025cefd1da0eaff6b49eb9"), "username" : "GoodGuyGreg", "first_name" : "Good Guy", "last_name" : "Greg" }
{ "_id" : ObjectId("63025cefd1da0eaff6b49eba"), "username" : "ScumbagSteve", "full_name" : [ { "first" : "Scumbag", "last" : "Steve" } ] }
{ "_id" : ObjectId("63025e62d1da0eaff6b49ebb"), "username" : "GoodGuyGreg", "first_name" : "Good Guy", "last_name" : "Greg" }
{ "_id" : ObjectId("63025e62d1da0eaff6b49ebc"), "username" : "ScumbagSteve", "full_name" : [ { "first" : "Scumbag", "last" : "Steve" } ] }
> db.posts.find({"title":"GoodGuyGreg"})
> db.posts.find({username:"GoodGuyGreg"})
{ "_id" : ObjectId("63025f5dd1da0eaff6b49ebd"), "username" : "GoodGuyGreg", "title" : "Passes out at party", "body" : "Wakes up early and cleans house" }
{ "_id" : ObjectId("63025f5dd1da0eaff6b49ebe"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("63026042d1da0eaff6b49ebf"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends ypu a Pull request" }
> db.posts.find()
{ "_id" : ObjectId("63025f5dd1da0eaff6b49ebd"), "username" : "GoodGuyGreg", "title" : "Passes out at party", "body" : "Wakes up early and cleans house" }
{ "_id" : ObjectId("63025f5dd1da0eaff6b49ebe"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("63026042d1da0eaff6b49ebf"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends ypu a Pull request" }
{ "_id" : ObjectId("63026042d1da0eaff6b49ec0"), "username" : "ScumbagSteve", "title" : "Borrows somthing", "body" : "Sells it" }
------------------------------------------------------------------------------------------------------------------------------
3 .find all posts that was authored by "GoodGuyGreg"
--------------------------------------------------------------------
> db.posts.find({username:"GoodGuyGreg"})
{ "_id" : ObjectId("63025f5dd1da0eaff6b49ebd"), "username" : "GoodGuyGreg", "title" : "Passes out at party", "body" : "Wakes up early and cleans house" }
{ "_id" : ObjectId("63025f5dd1da0eaff6b49ebe"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("63026042d1da0eaff6b49ebf"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends ypu a Pull request" }
--------------------------------------------------------------------------------------------------------------------------------------------
4.find all posts that was authored by "ScumbagSteve"
---------------------------------------------------------------------------------------------------------------
> db.posts.find({username:"ScumbagSteve"})
{ "_id" : ObjectId("63026042d1da0eaff6b49ec0"), "username" : "ScumbagSteve", "title" : "Borrows somthing", "body" : "Sells it" }
-------------------------------------------------------------------------------------------------------------------
5.find all comments
---------------------------
> db.comments.find()
{ "_id" : ObjectId("630272021fff23f31145282c"), "username" : "GoodGuyGreg", "comment" : "Hope you got a good deal!", "post" : ObjectId("5f44d3a148197d7749864def") }
{ "_id" : ObjectId("630272021fff23f31145282d"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agreement!", "post" : ObjectId("5f44d3a148197d7749864df0") }
{ "_id" : ObjectId("630272021fff23f31145282e"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agreement!", "post" : ObjectId("5f44d3a148197d7749864df1") }
{ "_id" : ObjectId("630272021fff23f31145282f"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("5f44d3a148197d7749864dec") }
{ "_id" : ObjectId("630272021fff23f311452830"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("5f44d3a148197d7749864dee") }
>
---------------------------------------------------------------------------------------------------
6.find all comments that was authored by "ScumbagSteve"
----------------------------------------------------------------------------------------
> db.comments.find({username:"ScumbagSteve"})
{ "_id" : ObjectId("630272021fff23f31145282f"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("5f44d3a148197d7749864dec") }
{ "_id" : ObjectId("630272021fff23f311452830"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("5f44d3a148197d7749864dee") }
> db.comments.find({username:"ScumbagSteve"})
{ "_id" : ObjectId("630272021fff23f31145282f"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("5f44d3a148197d7749864dec") }
{ "_id" : ObjectId("630272021fff23f311452830"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("5f44d3a148197d7749864dee") }
> db.comments.find({username:"ScumbagSteve"})
{ "_id" : ObjectId("630272021fff23f31145282f"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("5f44d3a148197d7749864dec") }
{ "_id" : ObjectId("630272021fff23f311452830"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("5f44d3a148197d7749864dee") }
-----------------------------------------------------------------------------------------------------------------
7.find all comments that was authored by "GoodGuyGreg"
-------------------------------------------------------------------------------------------
> db.comments.find({username:"GoodGuyGreg"})
{ "_id" : ObjectId("630272021fff23f31145282c"), "username" : "GoodGuyGreg", "comment" : "Hope you got a good deal!", "post" : ObjectId("5f44d3a148197d7749864def") }
{ "_id" : ObjectId("630272021fff23f31145282d"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agreement!", "post" : ObjectId("5f44d3a148197d7749864df0") }
{ "_id" : ObjectId("630272021fff23f31145282e"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agreement!", "post" : ObjectId("5f44d3a148197d7749864df1") }
--------------------------------------------------------------------------------------------------
8.find all comments belonging to the post "Reports a bug in your code"
----------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------